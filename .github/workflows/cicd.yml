name: Deploy to EC2

on:
  push:
    branches:
      - master

jobs:
  dockerize-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image to Docker Hub
        run: |
          docker build -t ${{ vars.DOCKERHUB_USERNAME }}/caveo-backend:latest .
          docker push ${{ vars.DOCKERHUB_USERNAME }}/caveo-backend:latest

      - name: Set up SSH key
        run: |
          echo "${{ secrets.SSH_EC2_KEY }}" > Hirocaveobackend.pem
          chmod 400 Hirocaveobackend.pem

      - name: Automatically accept the host key
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan -H ${{ secrets.EC2_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to EC2 via SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_EC2_KEY }}
          EC2_USER: "ubuntu"
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          COGNITO_CLIENT_ID: ${{ secrets.COGNITO_CLIENT_ID }}
          COGNITO_CLIENT_SECRET: ${{ secrets.COGNITO_CLIENT_SECRET }}
          USER_POOL_ID: ${{ secrets.USER_POOL_ID }}
          COGNITO_ADMIN_ACCESS_KEY: ${{ secrets.COGNITO_ADMIN_ACCESS_KEY }}
          COGNITO_ADMIN_SECRET_ACCESS_KEY: ${{ secrets.COGNITO_ADMIN_SECRET_ACCESS_KEY }}
        run: |
          # SSH into the server
          ssh -i "Hirocaveobackend.pem" $EC2_USER@$EC2_HOST <<EOF
            export DB_USER="${DB_USER}"
            export DB_PASSWORD="${DB_PASSWORD}"
            export DB_NAME="${DB_NAME}"
            export DB_HOST="${DB_HOST}"
            export DB_PORT="${DB_PORT}"
            export COGNITO_CLIENT_ID="${COGNITO_CLIENT_ID}"
            export COGNITO_CLIENT_SECRET="${COGNITO_CLIENT_SECRET}"
            export USER_POOL_ID="${USER_POOL_ID}"
            export COGNITO_ADMIN_ACCESS_KEY="${COGNITO_ADMIN_ACCESS_KEY}"
            export COGNITO_ADMIN_SECRET_ACCESS_KEY="${COGNITO_ADMIN_SECRET_ACCESS_KEY}"

            # Verify if the directory exists, if it doesn't, create it
            if [ ! -d "/home/ubuntu/caveo-backend" ]; then
              echo "Directory not found. Creating..."
              mkdir -p /home/ubuntu/caveo-backend
            fi

            cd /home/ubuntu/caveo-backend

            # Create .env file with the environment variables
            echo "DB_USER=${DB_USER}" > /home/ubuntu/caveo-backend/.env
            echo "DB_PASSWORD=${DB_PASSWORD}" >> /home/ubuntu/caveo-backend/.env
            echo "DB_NAME=${DB_NAME}" >> /home/ubuntu/caveo-backend/.env
            echo "DB_HOST=${DB_HOST}" >> /home/ubuntu/caveo-backend/.env
            echo "DB_PORT=${DB_PORT}" >> /home/ubuntu/caveo-backend/.env
            echo "COGNITO_CLIENT_ID=${COGNITO_CLIENT_ID}" >> /home/ubuntu/caveo-backend/.env
            echo "COGNITO_CLIENT_SECRET=${COGNITO_CLIENT_SECRET}" >> /home/ubuntu/caveo-backend/.env
            echo "USER_POOL_ID=${USER_POOL_ID}" >> /home/ubuntu/caveo-backend/.env
            echo "COGNITO_ADMIN_ACCESS_KEY=${COGNITO_ADMIN_ACCESS_KEY}" >> /home/ubuntu/caveo-backend/.env
            echo "COGNITO_ADMIN_SECRET_ACCESS_KEY=${COGNITO_ADMIN_SECRET_ACCESS_KEY}" >> /home/ubuntu/caveo-backend/.env

            # Verify docker-compose installation
            if ! command -v docker-compose &> /dev/null; then
              echo "docker-compose not found. Installing..."
              sudo apt-get update
              sudo apt-get install -y docker-compose
            fi
            
            # Check if docker-compose.yml exists, if not, copy it from the repo
            if [ ! -f "/home/ubuntu/caveo-backend/docker-compose.yml" ]; then
              echo "docker-compose.yml not found. Copying from repository..."
              echo "Current directory: $(pwd)"
              ls -al /home/runner/work/caveo-backend/
              scp -i ~/Hirocaveobackend.pem ./docker-compose.yml $EC2_USER@$EC2_HOST:/home/ubuntu/caveo-backend/
            fi

            # Shut down any running containers from the previous deployment
            docker-compose down

            # Build and start the containers using docker-compose
            docker-compose up -d --build
          EOF
